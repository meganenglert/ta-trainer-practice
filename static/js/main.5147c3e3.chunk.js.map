{"version":3,"sources":["components/TeamPointCounter.tsx","components/ControlPanel.tsx","components/QuestionViewer.tsx","interfaces/question.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TeamPointCounter","teamList","points","addPoints","addTeamRevealed","switchAddTeam","addTeam","useState","teamName","setTeamName","id","Row","xs","md","className","map","team","Col","Card","Body","Title","name","Text","score","ButtonGroup","Button","onClick","variant","InputGroup","FormControl","type","placeholder","value","onChange","ev","target","ID","length","ControlPanel","showAddCardModal","setQuestion","reveal","answerRevealed","deck","question","TEAMS","setTeamList","revealAddTeam","newTeam","items","Math","floor","random","QuestionViewer","bg","text","prompt","answer","roundType","AddCardModal","visible","setVisible","addCard","category","setCategory","setPrompt","setAnswer","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","Footer","console","log","episode","airdate","round","round1","App","QUESTIONS","activeQuestion","setActiveQuestion","setDeck","Container","newCard","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5147c3e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Col, Card, ButtonGroup, Button, Row, InputGroup, FormControl } from 'react-bootstrap';\r\nimport { Team } from '../interfaces/team';\r\n\r\nexport function TeamPointCounter({ teamList, points, addPoints, addTeamRevealed, switchAddTeam, addTeam }:\r\n    {\r\n        teamList: Team[], points: number, addPoints: (t: Team, p: number) => void,\r\n        addTeamRevealed: boolean, switchAddTeam: () => void, addTeam: (t: Team) => void\r\n    }): JSX.Element {\r\n\r\n    const [teamName, setTeamName] = useState<string>(\"NEW TEAM\");\r\n\r\n    function addNewTeam() {\r\n        addTeam({\r\n            ID: teamList.length + 1,\r\n            name: teamName,\r\n            score: 0\r\n        })\r\n        switchAddTeam();\r\n    }\r\n    return <div id=\"scores\">\r\n        <h1>Scoreboard</h1>\r\n        <Row xs={1} md={2} className=\"g-4\">\r\n            {teamList.map((team) => (\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>Team {team.name}</Card.Title>\r\n                            <Card.Text>\r\n                                {team.score}\r\n                            </Card.Text>\r\n                            <ButtonGroup id=\"change-points\">\r\n                                <Button onClick={() => addPoints(team, points)} variant=\"success\">Correct!</Button>\r\n                                <Button onClick={() => addPoints(team, -points)} variant=\"danger\">Incorrect!</Button>\r\n                            </ButtonGroup>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            ))}\r\n        \r\n        </Row>\r\n        <div>\r\n        <Button className = \"m-4\" variant=\"light\" onClick={switchAddTeam} id=\"add-team\">+ Add Team</Button>\r\n        {addTeamRevealed && <Card.Body>\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl\r\n                    type=\"string\" placeholder=\"New Team Name\" value={teamName} onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setTeamName(ev.target.value)}\r\n                />\r\n                <Button onClick={addNewTeam} variant=\"outline-secondary\" id=\"add-new-team\">\r\n                    Add!\r\n                </Button>\r\n            </InputGroup>\r\n        </Card.Body>}\r\n        </div>\r\n    </div >\r\n\r\n\r\n\r\n}\r\n\r\n","import { Button , Col} from 'react-bootstrap';\r\nimport { Question, roundType } from '../interfaces/question';\r\nimport { useState } from 'react';\r\nimport { Team } from '../interfaces/team';\r\nimport TEAMS from '../assets/teams.json';\r\nimport { TeamPointCounter } from './TeamPointCounter';\r\n\r\n// Same source as Dr. Bart used (I am lazy)\r\nfunction getRandomElement<T>(items: T[]): T  {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\nexport const LOCAL_STORAGE_USERS = 'ta-trainer-users';\r\n\r\n\r\n\r\n// from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\nexport function shuffle<T>(array: T[]): T[] {\r\n    let currentIndex = array.length,  randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n  \r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n  \r\n    return array;\r\n  }\r\n\r\n\r\n\r\nexport function ControlPanel({showAddCardModal, setQuestion, reveal, answerRevealed, deck, question}: \r\n    {showAddCardModal: (b: boolean)=>void,setQuestion: (q: Question)=>void, reveal: (r: boolean)=>void, answerRevealed: boolean, deck: Question[], question: Question}): JSX.Element {\r\n\r\n    \r\n    const [teamList, setTeamList] = useState<Team[]>(TEAMS as Team[]);\r\n    \r\n    const [addTeamRevealed, revealAddTeam] = useState<boolean>(false);\r\n\r\n    function switchAddTeam() {\r\n        revealAddTeam(!addTeamRevealed);\r\n    }\r\n\r\n\r\n    function addTeam(newTeam: Team) {\r\n        setTeamList([...teamList, newTeam]);\r\n      }\r\n      function addPoints(team: Team, points: number) {\r\n        team.score += points;\r\n        setTeamList([...teamList]);\r\n      }\r\n\r\n    function setRandomQuestion() {\r\n        reveal(false);\r\n        setQuestion(getRandomElement(deck as Question[]))\r\n    }\r\n    \r\n    function addNewCard() {\r\n        showAddCardModal(true);\r\n    }\r\n    return <Col>\r\n        <TeamPointCounter teamList={teamList} points={question.value} addPoints={addPoints} addTeamRevealed={addTeamRevealed} switchAddTeam={switchAddTeam} addTeam={addTeam}></TeamPointCounter>\r\n\r\n        <h1>Control Panel</h1>\r\n        <div> \r\n        <Button variant=\"light\" onClick={() => reveal(!answerRevealed)} className=\"m-4\">Reveal Answer</Button>\r\n        </div>\r\n        <Button variant=\"light\" onClick={setRandomQuestion} className=\"m-4\">Next Question</Button>\r\n        <div>\r\n        <Button variant=\"light\" onClick={addNewCard} className=\"m-4\">Add New Question</Button>\r\n        </div>\r\n    </Col>\r\n}","import { Col, Card, ButtonGroup, Button} from 'react-bootstrap';\r\nimport { Question } from '../interfaces/question';\r\n\r\n\r\n\r\nexport function QuestionViewer({ question, answerRevealed }:\r\n    { question: Question, answerRevealed: boolean } ): JSX.Element {\r\n    \r\n    \r\n    return <Col>\r\n        <h1>Question Viewer</h1>\r\n        <Card bg=\"white\" text=\"dark\">\r\n            <Card.Body>\r\n                <Card.Title>Question:</Card.Title>\r\n                <Card.Text>\r\n                    {question.prompt}\r\n                </Card.Text>\r\n            </Card.Body>\r\n            { answerRevealed && <Card.Body>\r\n                <Card.Text>\r\n                    {question.answer}\r\n                </Card.Text>\r\n            </Card.Body>}\r\n        </Card>\r\n\r\n        \r\n        \r\n\r\n    </Col>\r\n}","export enum roundType {\r\n    round1 = \"Jeopardy!\",\r\n    round2 = \"Double Jeopardy!\",\r\n    round3 = \"Final Jeopardy!\"\r\n}\r\n\r\nexport interface Question {\r\n    ID: number\r\n    episode: number\r\n    airdate: string\r\n    round: roundType\r\n    category: string\r\n    value: number\r\n    prompt: string\r\n    answer: string\r\n}","import React, { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\"\r\nimport { Question, roundType } from \"../interfaces/question\";\r\n\r\nexport function AddCardModal({ visible, setVisible, addCard }:\r\n    { visible: boolean, setVisible: (b: boolean) => void, addCard: (q: Question) => void }): JSX.Element {\r\n    const [category, setCategory] = useState<string>(\"NO CATEGORY\");\r\n    const [prompt, setPrompt] = useState<string>(\"PROMPT TEXT\");\r\n    const [answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\r\n\r\n    function saveCard() {\r\n        console.log(\"SAVING\", category, prompt, answer);\r\n        addCard({\r\n            ID: Math.random(),\r\n            episode: -1,\r\n            airdate: \"custom\",\r\n            round: roundType.round1,\r\n            category: category,\r\n            value: 500,\r\n            prompt: prompt,\r\n            answer: answer\r\n        });\r\n\r\n        setVisible(false);\r\n    }\r\n    const hide = () => setVisible(false);\r\n    return (\r\n        <Modal show={visible} onHide={() => setVisible(false)}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Modal title</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group className=\"mb-3\" controlId=\"addCardForm.categoryTextArea\">\r\n                        <Form.Label>Question Category</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={1}\r\n                            value={category}\r\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCategory(ev.target.value)} />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"addCardForm.questionTextArea\">\r\n                        <Form.Label>Question</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={3}\r\n                            value={prompt}\r\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setPrompt(ev.target.value)} />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\r\n                        <Form.Label>Correct Answer</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={1}\r\n                            value={answer}\r\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)} />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n                <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport QUESTIONS from './assets/1000questions.json';\r\nimport { ControlPanel } from './components/ControlPanel';\r\nimport { QuestionViewer } from './components/QuestionViewer';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container , Row} from 'react-bootstrap';\r\nimport { Question } from './interfaces/question';\r\nimport { AddCardModal } from './components/AddCardModal';\r\nimport { Team } from './interfaces/team';\r\n\r\n\r\nfunction App(): JSX.Element {\r\n\r\n\r\n  const [activeQuestion, setActiveQuestion] = useState<Question>(QUESTIONS[0] as Question);\r\n  const [answerRevealed, reveal] = useState<boolean>(false);\r\n  const [visible, setVisible] = useState<boolean>(false);\r\n  const [deck, setDeck] = useState<Question[]>(QUESTIONS as Question[]);\r\n  function addCard(newCard: Question) {\r\n    setDeck([...deck, newCard]);\r\n  }\r\n  return (\r\n    <Container className=\"App\">\r\n      <h1>jeopardy!</h1>\r\n      <Row>\r\n        \r\n        <ControlPanel showAddCardModal={setVisible} setQuestion={setActiveQuestion} reveal={reveal} answerRevealed={answerRevealed} deck={deck} question={activeQuestion}></ControlPanel>\r\n        <QuestionViewer question={activeQuestion} answerRevealed={answerRevealed}></QuestionViewer>\r\n        <AddCardModal visible={visible} setVisible={setVisible} addCard={addCard}></AddCardModal>\r\n      </Row>\r\n      <div id=\"source-link\"><a href=\"https://www.reddit.com/r/datasets/comments/1uyd0t/200000_jeopardy_questions_in_a_json_file/\">View question source here!</a></div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}