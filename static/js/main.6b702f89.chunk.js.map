{"version":3,"sources":["components/UserList.tsx","components/ControlPanel.tsx","components/TeamPointCounter.tsx","components/QuestionViewer.tsx","interfaces/question.ts","components/AddCardModal.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserList","users","setUsers","items","onChange","newUsers","console","log","LOCAL_STORAGE_USERS","INITIAL_USERS","id","text","ControlPanel","showAddCardModal","setQuestion","reveal","answerRevealed","deck","useState","rawUsers","localStorage","getItem","JSON","parse","getLocalStorageUsers","Col","Button","onClick","Math","floor","random","length","array","randomIndex","currentIndex","shuffle","setItem","stringify","className","variant","TeamPointCounter","teamList","points","addPoints","Row","xs","md","map","team","Card","Body","Title","ID","Text","score","ButtonGroup","QuestionViewer","question","teams","style","width","prompt","answer","value","roundType","AddCardModal","visible","setVisible","addCard","category","setCategory","setPrompt","setAnswer","Modal","show","onHide","Header","closeButton","Form","Group","controlId","Label","Control","as","rows","ev","target","Footer","episode","airdate","round","round1","App","QUESTIONS","activeQuestion","setActiveQuestion","setDeck","TEAMS","setTeamList","Container","newCard","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6YAEO,SAASA,EAAT,GAAiG,IAA9EC,EAA6E,EAA7EA,MAAOC,EAAsE,EAAtEA,SAO7B,OAAO,cAAC,IAAD,CAAiBC,MAAOF,EAAOG,SAJtC,SAAsBC,GAClBH,EAASG,GACTC,QAAQC,IAAIN,MCKb,IAAMO,EAAsB,mBAuB5B,IAAMC,EAAwB,CACjC,CAACC,GAAI,IAAKC,KAAM,SAChB,CAACD,GAAI,IAAKC,KAAM,QAChB,CAACD,GAAI,IAAKC,KAAM,cAab,SAASC,EAAT,GAC2J,IADpIC,EACmI,EADnIA,iBAAkBC,EACiH,EADjHA,YAAaC,EACoG,EADpGA,OAAQC,EAC4F,EAD5FA,eAAgBC,EAC4E,EAD5EA,KAI7E,EAA0BC,mBAd3B,WACH,IAAIC,EAAwBC,aAAaC,QAAQb,GACjD,OAAiB,OAAbW,EACM,GAAN,OAAWV,GAGJa,KAAKC,MAAMJ,GAQyBK,IAA3C,mBAAOvB,EAAP,KAAcC,EAAd,KAkBJ,OAAO,eAACuB,EAAA,EAAD,WACH,+CACA,cAACzB,EAAD,CAAUC,MAAOA,EAAOC,SAAUA,IAClC,cAACwB,EAAA,EAAD,CAAQC,QAAS,kBAAMZ,GAAQC,IAA/B,2BACA,cAACU,EAAA,EAAD,CAAQC,QApBZ,WAjDJ,IAA6BxB,EAkDrBY,GAAO,GACPD,GAnDqBX,EAmDQc,GAlDpBW,KAAKC,MAAMD,KAAKE,SAAS3B,EAAM4B,WAoExC,0BACA,cAACL,EAAA,EAAD,CAAQC,QAZZ,WACIzB,EAAS,YAlDV,SAAoB8B,GAIvB,IAHA,IAAkCC,EAA9BC,EAAeF,EAAMD,OAGD,IAAjBG,GAAoB,CAGzBD,EAAcL,KAAKC,MAAMD,KAAKE,SAAWI,GACzCA,IAJyB,MAOmB,CAC1CF,EAAMC,GAAcD,EAAME,IAD3BF,EAAME,GAPkB,KAOHF,EAAMC,GAPH,KAW3B,OAAOD,EAmCUG,CAAQlC,MAWrB,2BACA,cAACyB,EAAA,EAAD,CAAQC,QAjBZ,WACIP,aAAagB,QAAQ5B,EAAqBc,KAAKe,UAAUpC,KAgBlCqC,UAAU,MAAMC,QAAQ,UAA/C,kBACA,cAACb,EAAA,EAAD,CAAQC,QAVZ,WACId,GAAiB,IASYyB,UAAU,MAAvC,iC,+BC5ED,SAASE,EAAT,GAC0F,IAD9DC,EAC6D,EAD7DA,SAAUC,EACmD,EADnDA,OAAQC,EAC2C,EAD3CA,UAGjD,OAAO,sBAAKjC,GAAG,SAAR,UACH,4CACA,cAACkC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGR,UAAU,MAA7B,SACKG,EAASM,KAAI,SAACC,GAAD,OACV,cAACvB,EAAA,EAAD,UACI,cAACwB,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,eAACD,EAAA,EAAKE,MAAN,mBAAkBH,EAAKI,MACvB,cAACH,EAAA,EAAKI,KAAN,UACKL,EAAKM,QAGV,eAACC,EAAA,EAAD,CAAa7C,GAAG,gBAAhB,UACI,cAACgB,EAAA,EAAD,CAAQC,QAAS,kBAAMgB,EAAUK,EAAMN,IAASH,QAAQ,UAAxD,sBACA,cAACb,EAAA,EAAD,CAAQC,QAAS,kBAAMgB,EAAUK,GAAON,IAASH,QAAQ,SAAzD,0CChBzB,SAASiB,EAAT,GACoH,IAD1FC,EACyF,EADzFA,SAAUzC,EAC+E,EAD/EA,eAAgB0C,EAC+D,EAD/DA,MAAOf,EACwD,EADxDA,UAE9D,OAAO,eAAClB,EAAA,EAAD,WACH,iDACA,eAACwB,EAAA,EAAD,CAAMU,MAAO,CAAEC,MAAO,SAAtB,UACI,eAACX,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAKE,MAAN,wBACA,cAACF,EAAA,EAAKI,KAAN,UACKI,EAASI,YAGhB7C,GAAkB,cAACiC,EAAA,EAAKC,KAAN,UAChB,cAACD,EAAA,EAAKI,KAAN,UACKI,EAASK,cAKtB,cAACtB,EAAD,CAAkBC,SAAUiB,EAAOhB,OAAQe,EAASM,MAAOpB,UAAWA,O,WCvBlEqB,E,oCCIL,SAASC,EAAT,GACmG,IAD3EC,EAC0E,EAD1EA,QAASC,EACiE,EADjEA,WAAYC,EACqD,EADrDA,QAEhD,EAAgClD,mBAAiB,eAAjD,mBAAOmD,EAAP,KAAiBC,EAAjB,KACA,EAA4BpD,mBAAiB,eAA7C,mBAAO2C,EAAP,KAAeU,EAAf,KACA,EAA4BrD,mBAAiB,eAA7C,mBAAO4C,EAAP,KAAeU,EAAf,KAkBA,OACI,eAACC,EAAA,EAAD,CAAOC,KAAMR,EAASS,OAAQ,kBAAMR,GAAW,IAA/C,UACI,cAACM,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACI,cAACJ,EAAA,EAAMtB,MAAP,4BAGJ,cAACsB,EAAA,EAAMvB,KAAP,UACI,eAAC4B,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,MAAN,CAAYzC,UAAU,OAAO0C,UAAU,+BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,gCACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWC,KAAM,EAC9BrB,MAAOM,EACPjE,SAAU,SAACiF,GAAD,OAAgDf,EAAYe,EAAGC,OAAOvB,aAExF,eAACe,EAAA,EAAKC,MAAN,CAAYzC,UAAU,OAAO0C,UAAU,+BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,uBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWC,KAAM,EAC9BrB,MAAOF,EACPzD,SAAU,SAACiF,GAAD,OAAgDd,EAAUc,EAAGC,OAAOvB,aAEtF,eAACe,EAAA,EAAKC,MAAN,CAAYzC,UAAU,OAAO0C,UAAU,6BAAvC,UACI,cAACF,EAAA,EAAKG,MAAN,6BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWC,KAAM,EAC9BrB,MAAOD,EACP1D,SAAU,SAACiF,GAAD,OAAgDb,EAAUa,EAAGC,OAAOvB,kBAK9F,eAACU,EAAA,EAAMc,OAAP,WACI,cAAC7D,EAAA,EAAD,CAAQa,QAAQ,YAAYZ,QA/B3B,kBAAMwC,GAAW,IA+BlB,mBACA,cAACzC,EAAA,EAAD,CAAQa,QAAQ,UAAUZ,QA/CtC,WACIrB,QAAQC,IAAI,SAAU8D,EAAUR,EAAQC,GACxCM,EAAQ,CACJhB,GAAIxB,KAAKE,SACT0D,SAAU,EACVC,QAAS,SACTC,MAAO1B,EAAU2B,OACjBtB,SAAUA,EACVN,MAAO,IACPF,OAAQA,EACRC,OAAQA,IAGZK,GAAW,IAkCH,iC,SDzDJH,K,mBAAAA,E,0BAAAA,E,0BAAAA,M,KEyCG4B,MA5Bf,WAGE,MAA4C1E,mBAAmB2E,EAAU,IAAzE,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAiC7E,oBAAkB,GAAnD,mBAAOF,EAAP,KAAuBD,EAAvB,KACA,EAA8BG,oBAAkB,GAAhD,mBAAOgD,EAAP,KAAgBC,EAAhB,KACA,EAAwBjD,mBAAqB2E,GAA7C,mBAAO5E,EAAP,KAAa+E,EAAb,KACA,EAAgC9E,mBAAiB+E,GAAjD,mBAAOxD,EAAP,KAAiByD,EAAjB,KASA,OACE,cAACC,EAAA,EAAD,CAAW7D,UAAU,MAArB,SACE,eAACM,EAAA,EAAD,WAEE,cAAChC,EAAD,CAAcC,iBAAkBsD,EAAYrD,YAAaiF,EAAmBhF,OAAQA,EAAQC,eAAgBA,EAAgBC,KAAMA,IAClI,cAACuC,EAAD,CAAgBC,SAAUqC,EAAgB9E,eAAgBA,EAAgB0C,MAAOjB,EAAUE,UAVjG,SAAmBK,EAAYN,GAC7BM,EAAKM,OAASZ,EACdwD,EAAY,YAAIzD,OASZ,cAACwB,EAAD,CAAcC,QAASA,EAASC,WAAYA,EAAYC,QAd9D,SAAiBgC,GACfJ,EAAQ,GAAD,mBAAK/E,GAAL,CAAWmF,cCRPC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.6b702f89.chunk.js","sourcesContent":["import EditableDndList, { Task } from \"editable-dnd-list\";\r\n\r\nexport function UserList({users, setUsers}: {users: Task[], setUsers: (t: Task[])=>void}): JSX.Element {\r\n\r\n    \r\n    function handleChange(newUsers: Task[]): void {\r\n        setUsers(newUsers);\r\n        console.log(users);\r\n    }\r\n    return <EditableDndList items={users} onChange={handleChange} />;\r\n}\r\n\r\n","import { Button , Col} from 'react-bootstrap';\r\nimport { Question, roundType } from '../interfaces/question';\r\nimport QUESTIONS from '../assets/1000questions.json';\r\nimport { Task as User } from 'editable-dnd-list';\r\nimport { useState } from 'react';\r\nimport { UserList } from './UserList';\r\n\r\n// Same source as Dr. Bart used (I am lazy)\r\nfunction getRandomElement<T>(items: T[]): T  {\r\n    return items[Math.floor(Math.random()*items.length)];\r\n}\r\n\r\nexport const LOCAL_STORAGE_USERS = 'ta-trainer-users';\r\n\r\n\r\n\r\n// from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\nexport function shuffle<T>(array: T[]): T[] {\r\n    let currentIndex = array.length,  randomIndex;\r\n  \r\n    // While there remain elements to shuffle...\r\n    while (currentIndex !== 0) {\r\n  \r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex--;\r\n  \r\n      // And swap it with the current element.\r\n      [array[currentIndex], array[randomIndex]] = [\r\n        array[randomIndex], array[currentIndex]];\r\n    }\r\n  \r\n    return array;\r\n  }\r\n\r\nexport const INITIAL_USERS: User[] = [\r\n    {id: '1', text: \"Megan\"},\r\n    {id: '2', text: \"suki\"},\r\n    {id: '3', text: 'sebastian'}\r\n];\r\n\r\nexport function getLocalStorageUsers(): User[] {\r\n    let rawUsers: string|null = localStorage.getItem(LOCAL_STORAGE_USERS);\r\n    if (rawUsers === null) {\r\n        return [...INITIAL_USERS];\r\n    }\r\n    else {\r\n        return JSON.parse(rawUsers);\r\n    }\r\n}\r\n\r\nexport function ControlPanel({showAddCardModal, setQuestion, reveal, answerRevealed, deck}: \r\n    {showAddCardModal: (b: boolean)=>void,setQuestion: (q: Question)=>void, reveal: (r: boolean)=>void, answerRevealed: boolean, deck: Question[]}): JSX.Element {\r\n\r\n       \r\n        const [users, setUsers] = useState<User[]>(getLocalStorageUsers());\r\n        \r\n    function setRandomQuestion() {\r\n        reveal(false);\r\n        setQuestion(getRandomElement(deck as Question[]))\r\n    }\r\n\r\n    function save() {\r\n        localStorage.setItem(LOCAL_STORAGE_USERS, JSON.stringify(users));\r\n    }\r\n    \r\n    function shuffleUsers() {\r\n        setUsers([...shuffle(users)]);\r\n    }\r\n    \r\n    function addNewCard() {\r\n        showAddCardModal(true);\r\n    }\r\n    return <Col>\r\n        <h1>Control Panel</h1>\r\n        <UserList users={users} setUsers={setUsers}></UserList>\r\n        <Button onClick={() => reveal(!answerRevealed)}>Reveal Answer</Button>\r\n        <Button onClick={setRandomQuestion}>New Question</Button>\r\n        <Button onClick={shuffleUsers}>Shuffle Users</Button>\r\n        <Button onClick={save} className=\"m-4\" variant=\"success\">Save</Button>\r\n        <Button onClick={addNewCard} className=\"m-4\">Add new question</Button>\r\n    </Col>\r\n}","import { Col, Card, ButtonGroup, Button, Row } from 'react-bootstrap';\r\nimport { Question } from '../interfaces/question';\r\nimport { Team } from '../interfaces/team';\r\n\r\nexport function TeamPointCounter({ teamList, points, addPoints }:\r\n    { teamList: Team[], points: number, addPoints: (t: Team, p: number) => void }): JSX.Element {\r\n\r\n    return <div id=\"scores\">\r\n        <h1>Scoreboard</h1>\r\n        <Row xs={1} md={2} className=\"g-4\">\r\n            {teamList.map((team) => (\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Body>\r\n                            <Card.Title>Team {team.ID}</Card.Title>\r\n                            <Card.Text>\r\n                                {team.score}\r\n                            </Card.Text>\r\n\r\n                            <ButtonGroup id=\"change-points\">\r\n                                <Button onClick={() => addPoints(team, points)} variant=\"success\">Correct!</Button>\r\n                                <Button onClick={() => addPoints(team, -points)} variant=\"danger\">Incorrect!</Button>\r\n                            </ButtonGroup>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            ))}\r\n        </Row>\r\n    </div >\r\n\r\n\r\n\r\n}\r\n\r\n","import { Col, Card, ButtonGroup, Button} from 'react-bootstrap';\r\nimport { Question } from '../interfaces/question';\r\nimport { Team } from '../interfaces/team';\r\nimport { TeamPointCounter } from './TeamPointCounter';\r\n\r\nexport function QuestionViewer({ question, answerRevealed, teams, addPoints }:\r\n    { question: Question, answerRevealed: boolean, teams: Team[], addPoints: (t: Team, p: number) => void }): JSX.Element {\r\n    return <Col>\r\n        <h1>Question Viewer</h1>\r\n        <Card style={{ width: '18rem' }}>\r\n            <Card.Body>\r\n                <Card.Title>Question:</Card.Title>\r\n                <Card.Text>\r\n                    {question.prompt}\r\n                </Card.Text>\r\n            </Card.Body>\r\n            { answerRevealed && <Card.Body>\r\n                <Card.Text>\r\n                    {question.answer}\r\n                </Card.Text>\r\n            </Card.Body>}\r\n        </Card>\r\n\r\n        <TeamPointCounter teamList={teams} points={question.value} addPoints={addPoints}></TeamPointCounter>\r\n\r\n    </Col>\r\n}","export enum roundType {\r\n    round1 = \"Jeopardy!\",\r\n    round2 = \"Double Jeopardy!\",\r\n    round3 = \"Final Jeopardy!\"\r\n}\r\n\r\nexport interface Question {\r\n    ID: number\r\n    episode: number\r\n    airdate: string\r\n    round: roundType\r\n    category: string\r\n    value: number\r\n    prompt: string\r\n    answer: string\r\n}","import React, { useState } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\"\r\nimport { Question, roundType } from \"../interfaces/question\";\r\n\r\nexport function AddCardModal({ visible, setVisible, addCard }:\r\n    { visible: boolean, setVisible: (b: boolean) => void, addCard: (q: Question) => void }): JSX.Element {\r\n    const [category, setCategory] = useState<string>(\"NO CATEGORY\");\r\n    const [prompt, setPrompt] = useState<string>(\"PROMPT TEXT\");\r\n    const [answer, setAnswer] = useState<string>(\"ANSWER TEXT\");\r\n\r\n    function saveCard() {\r\n        console.log(\"SAVING\", category, prompt, answer);\r\n        addCard({\r\n            ID: Math.random(),\r\n            episode: -1,\r\n            airdate: \"custom\",\r\n            round: roundType.round1,\r\n            category: category,\r\n            value: 500,\r\n            prompt: prompt,\r\n            answer: answer\r\n        });\r\n\r\n        setVisible(false);\r\n    }\r\n    const hide = () => setVisible(false);\r\n    return (\r\n        <Modal show={visible} onHide={() => setVisible(false)}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Modal title</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group className=\"mb-3\" controlId=\"addCardForm.categoryTextArea\">\r\n                        <Form.Label>Question Category</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={1}\r\n                            value={category}\r\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setCategory(ev.target.value)} />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"addCardForm.questionTextArea\">\r\n                        <Form.Label>Question</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={3}\r\n                            value={prompt}\r\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setPrompt(ev.target.value)} />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"addCardForm.answerTextArea\">\r\n                        <Form.Label>Correct Answer</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={1}\r\n                            value={answer}\r\n                            onChange={(ev: React.ChangeEvent<HTMLTextAreaElement>) => setAnswer(ev.target.value)} />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={hide}>Close</Button>\r\n                <Button variant=\"primary\" onClick={saveCard}>Save changes</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport QUESTIONS from './assets/1000questions.json';\nimport { ControlPanel } from './components/ControlPanel';\nimport { QuestionViewer } from './components/QuestionViewer';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container , Row} from 'react-bootstrap';\nimport { Question } from './interfaces/question';\nimport TEAMS from './assets/teams.json';\nimport { AddCardModal } from './components/AddCardModal';\nimport { Team } from './interfaces/team';\n\n\nfunction App(): JSX.Element {\n\n  \n  const [activeQuestion, setActiveQuestion] = useState<Question>(QUESTIONS[0] as Question);\n  const [answerRevealed, reveal] = useState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [deck, setDeck] = useState<Question[]>(QUESTIONS as Question[]);\n  const [teamList, setTeamList] = useState<Team[]>(TEAMS as Team[]);\n  function addCard(newCard: Question) {\n    setDeck([...deck, newCard]);\n  }\n  function addPoints(team: Team, points: number) {\n    team.score += points;\n    setTeamList([...teamList]);\n  }\n  \n  return (\n    <Container className=\"App\">\n      <Row>\n        \n        <ControlPanel showAddCardModal={setVisible} setQuestion={setActiveQuestion} reveal={reveal} answerRevealed={answerRevealed} deck={deck}></ControlPanel>\n        <QuestionViewer question={activeQuestion} answerRevealed={answerRevealed} teams={teamList} addPoints={addPoints}></QuestionViewer>\n        <AddCardModal visible={visible} setVisible={setVisible} addCard={addCard}></AddCardModal>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}